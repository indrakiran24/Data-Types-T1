Promise:
--------
	*A promise is a special javascript object that represents the eventual completion of an asynchronous operation.

	promises can be three states:
		-->Three states
		1)Pending: The initial state, the promise is still waiting for the operation to finish.
		2)fulfilled: The operation completed successfully.
		3)Rejected: The operation failed.

		EXPLANATION:->
			->To create a promise constructor new Promise(); is used.
			->The promise constructor takes a function with two parameters.
			->Resolve-->To mark as the promise is successful
			->reject--->To mark as Failed
	
		Handling:->
			->.then() method is called when the promise is fulfilled
			->It receives the result from the resolve();
			->.catch() method is called when promise is rejected.


		EXAMPLE:->
				let mypromise=new Promise((resolve,reject)=>{
				let success=true
				if(success){
				resolve("The operation is Successful")
				}else{
				reject("The operation has Failed")
				}
				});

		Chaining Promises:
			-->You can have chain multile .then()
				EX:
					let promise =new Promise()


	promise with settimeout():
			EX:-> let myPromise = new Promise((resolve, reject) => {
   				 setTimeout(() => {
       			 resolve("Promise will execute after 2");
   			 }, 2000); 
			});
    		myPromise
    		.then(result => {
        	console.log(result); 
    		})
    		.catch(error => {
        	console.log(error);
    	});
			EX2:=>
					    let fetchData=new Promise((resolve,reject)=>{
        				let dataFetched=false
       					 setTimeout(()=>{
          				  if(dataFetched){
               			 resolve("Data fetched successfully")
            			}
            			else{
               			 reject("Data Fetching failed")
            			}
        				},2000)
   						 })






<!-- <script>
    let mypromise=new Promise((resolve,reject)=>{
	let success=false
		if(success){
		resolve("The operation is Successful")
		}
        else{
		    reject("The operation has Failed")
		}
});
mypromise 
.then(result=>{
    console.log(result)
})
.catch(error=>{
    console.log(error)
})
</script> -->
<!-- <script>
    let promise =new Promise((resolve,reject)=>{
        resolve(7);
    });
    promise
    .then(result=>{
        console.log(result)
        return result*2
    })
    .then (result=>{
        console.log(result);
        return result+3;
    })
    .then (result=>{
        console.log(result);
    })
    .catch(error=>{
        console.log(error)
    })
    
</script> -->
<!-- <script>
    let promise=new Promise((resolve,result)=>{

    });
        setTimeout(function(){
        console.log("The process is executed")
        
    },2000);
    promise
    .then(result=>{
        console.log(result=>{
            console.log
        })
    })
</script> -->
<!-- <script>
let myPromise = new Promise((resolve, reject) => {
    setTimeout(() => {
        resolve("Promise will execute after 2");
    }, 2000); 
});

    myPromise
    .then(result => {
        console.log(result); 
    })
    .catch(error => {
        console.log(error);
    });
</script> -->
<script>
    let fetchData=new Promise((resolve,reject)=>{
        let dataFetched=false
        setTimeout(()=>{
            if(dataFetched){
                resolve("Data fetched successfully")
            }
            else{
                reject("Data Fetching failed")
            }
        },2000)
    })
</script>
